<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<Title>Simulation Report</Title>	
</head>
<body>
<script id="JSInclude" src="Cadence_PSI.js" 	type="text/javascript"></script>
<script id="JSIncludeBasic" src="Cadence_Basic.js" 	type="text/javascript"></script>
<script id="JSIncludeTraceCheck" src="Cadence_Tracecheck.js" 	type="text/javascript"></script>
<script id="JSIncludeConnectServer" src="Cadence_ConnectServer.js" 	type="text/javascript"></script>

<style type="text/css"> 
ul,li, p, p.text { font-family:"Calibri"; font-size:12.0pt; font-weight:normal; }
h1,h2,h3,h4,h5,h6,h6.text{font-family:"Calibri";}
p.pass { color:green;}
p.fail { color:red;}
table {border-collapse: collapse; border: 1px outset black;}
td.thicktopborder {border-top-width:3px;}
td.thickbottomborder {border-bottom-width:3px;}
td.thicktopbottomborder {border-top-width:3px;border-bottom-width:3px;}
td {border:1px inset black;padding: 5px 5px 5px 5px;font-family:"Times New Roman";font-size:9.0pt}
.titlecolumn {text-align:left; white-space:normal;}
.datacolumn {text-align:center;white-space:normal;}
.titlerow{color:#243F60;border-bottom-width:3px;}
p.image {width:700px; padding:25px 0 0 0;}
p.curve {width:700px; padding:25px 0 0 0;}
#color1 {
	BACKGROUND-COLOR: #CAE5E8;
}
#color2 {
	
}
</style>

<script type="text/javascript">
function doWheel(ob)
{
	if(event.altKey)
	{
		ob.style.zoom*=event.wheelDelta>0?1.25:0.8;
		return false;
	}
	return true;
}
function doJump(tagID)
{
	if(tagID != '')
	{
		document.getElementById(tagID).scrollIntoView();
	}
}
function doToCurve(data)
{
	if(data != '')
	{
		window.navigate(data);
	}
}
function doImageChange(tagID,imagetagid)
{
	if(tagID != '')
	{
		document.getElementById(tagID).innerHTML = 	 '<p ><img style=\"zoom:1\" width=800 Height=600 src=\"' + document.getElementById(imagetagid).src + '\" onmousewheel=\"return doWheel(this)\"></p>';
	}
}
</script>
<script language="JavaScript">
function $(s){return document.getElementById(s);}
function swap(s,a,b,c){$(s)[a]=$(s)[a]==b?c:b;}
function hide(s){
$(s).style.display=$(s).style.display=="none"?"":"none";
$(s).style.display=="none" ? $(s+'image').src = $("closeimg").src:$(s+'image').src = $("openimg").src;
}
</script>
<script type="text/javascript">

var stIsIE = false;

sorttable = {
  init: function() {
	
    // quit if this function has already been called
    if (arguments.callee.done) return;
    // flag this function so we don't do the same thing twice
    arguments.callee.done = true;	
    // kill the timer
    if (_timer) clearInterval(_timer);
    
    if (!document.createElement || !document.getElementsByTagName) return;
    
    sorttable.DATE_RE = /^(\d\d?)[\/\.-](\d\d?)[\/\.-]((\d\d)?\d\d)$/;
    
    forEach(document.getElementsByTagName('table'), function(table) {
      if (table.className.search(/\bsortable\b/) != -1) {
        sorttable.makeSortable(table);
      }
    });
    
  },
  
  makeSortable: function(table) {
    if (table.getElementsByTagName('thead').length == 0) {
      // table doesn't have a tHead. Since it should have, create one and
      // put the first table row in it.
      the = document.createElement('thead');
      the.appendChild(table.rows[0]);
      table.insertBefore(the,table.firstChild);
    }
    // Safari doesn't support table.tHead, sigh
    if (table.tHead == null) table.tHead = table.getElementsByTagName('thead')[0];
    
    if (table.tHead.rows.length != 1) return; // can't cope with two header rows
    
    // Sorttable v1 put rows with a class of "sortbottom" at the bottom (as
    // "total" rows, for example). This is B&R, since what you're supposed
    // to do is put them in a tfoot. So, if there are sortbottom rows,
    // for backwards compatibility, move them to tfoot (creating it if needed).
    sortbottomrows = [];
    for (var i=0; i<table.rows.length; i++) {
      if (table.rows[i].className.search(/\bsortbottom\b/) != -1) {
        sortbottomrows[sortbottomrows.length] = table.rows[i];
      }
    }
    if (sortbottomrows) {
      if (table.tFoot == null) {
        // table doesn't have a tfoot. Create one.
        tfo = document.createElement('tfoot');
        table.appendChild(tfo);
      }
      for (var i=0; i<sortbottomrows.length; i++) {
        tfo.appendChild(sortbottomrows[i]);
      }
      delete sortbottomrows;
    }
    
    // work through each column and calculate its type
    headrow = table.tHead.rows[0].cells;
    for (var i=0; i<headrow.length; i++) {
      // manually override the type with a sorttable_type attribute
      if (!headrow[i].className.match(/\bsorttable_nosort\b/)) { // skip this col
        mtch = headrow[i].className.match(/\bsorttable_([a-z0-9]+)\b/);
        if (mtch) { override = mtch[1]; }
	      if (mtch && typeof sorttable["sort_"+override] == 'function') {
	        headrow[i].sorttable_sortfunction = sorttable["sort_"+override];
	      } else {
	        headrow[i].sorttable_sortfunction = sorttable.guessType(table,i);
	      }
	      // make it clickable to sort
	      headrow[i].sorttable_columnindex = i;
	      headrow[i].sorttable_tbody = table.tBodies[0];
	      dean_addEvent(headrow[i],"click", function(e) {

		   sortfwdind = document.getElementById('sorttable_sortfwdind');
          if (sortfwdind) { sortfwdind.parentNode.removeChild(sortfwdind); }
          sortrevind = document.getElementById('sorttable_sortrevind');
          if (sortrevind) { sortrevind.parentNode.removeChild(sortrevind); }
		  
          if (this.className.search(/\bsorttable_sorted\b/) != -1) {
            // if we're already sorted by this column, just 
            // reverse the table, which is quicker
            sorttable.reverse(this.sorttable_tbody);
            this.className = this.className.replace('sorttable_sorted',
                                                    'sorttable_sorted_reverse');
			
            sortrevind = document.createElement('span');
            sortrevind.id = "sorttable_sortrevind";
            sortrevind.innerHTML = '&nbsp<font face="webdings">6</font>';
			//stIsIE ? '&nbsp<font face="webdings">5</font>' : '&nbsp;&#x25B4;';
            this.appendChild(sortrevind);
            return;
          }
          if (this.className.search(/\bsorttable_sorted_reverse\b/) != -1) {
            // if we're already sorted by this column in reverse, just 
            // re-reverse the table, which is quicker
            sorttable.reverse(this.sorttable_tbody);
            this.className = this.className.replace('sorttable_sorted_reverse',
                                                    'sorttable_sorted');
		    sortfwdind = document.createElement('span');
            sortfwdind.id = "sorttable_sortfwdind";
            sortfwdind.innerHTML = '&nbsp<font face="webdings">5</font>';
			//stIsIE ? '&nbsp<font face="webdings">6</font>' : '&nbsp;&#x25BE;';
            this.appendChild(sortfwdind);
            return;
          }
          
          // remove sorttable_sorted classes
          theadrow = this.parentNode;
          forEach(theadrow.childNodes, function(cell) {
            if (cell.nodeType == 1) { // an element
              cell.className = cell.className.replace('sorttable_sorted_reverse','');
              cell.className = cell.className.replace('sorttable_sorted','');
            }
          });
         // sortfwdind = document.getElementById('sorttable_sortfwdind');
         // if (sortfwdind) { sortfwdind.parentNode.removeChild(sortfwdind); }
         // sortrevind = document.getElementById('sorttable_sortrevind');
         // if (sortrevind) { sortrevind.parentNode.removeChild(sortrevind); }
          
          this.className += ' sorttable_sorted';
          sortfwdind = document.createElement('span');
          sortfwdind.id = "sorttable_sortfwdind";
          sortfwdind.innerHTML = '&nbsp<font face="webdings">5</font>';
		 // stIsIE ? '&nbsp<font face="webdings">6</font>' : '&nbsp;&#x25BE;';
          this.appendChild(sortfwdind);

	        // build an array to sort. This is a Schwartzian transform thing,
	        // i.e., we "decorate" each row with the actual sort key,
	        // sort based on the sort keys, and then put the rows back in order
	        // which is a lot faster because you only do getInnerText once per row
	        row_array = [];
	        col = this.sorttable_columnindex;
	        rows = this.sorttable_tbody.rows;
	        for (var j=0; j<rows.length; j++) {
	          row_array[row_array.length] = [sorttable.getInnerText(rows[j].cells[col]), rows[j]];
	        }
	        /* If you want a stable sort, uncomment the following line */
	        //sorttable.shaker_sort(row_array, this.sorttable_sortfunction);
	        /* and comment out this one */
	        row_array.sort(this.sorttable_sortfunction);
	        
	        tb = this.sorttable_tbody;
	        for (var j=0; j<row_array.length; j++) {
	          tb.appendChild(row_array[j][1]);
	        }
	        
	        delete row_array;
	      });
	    }
    }
  },
  
  guessType: function(table, column) {
    // guess the type of a column based on its first non-blank row
    sortfn = sorttable.sort_alpha;
    for (var i=0; i<table.tBodies[0].rows.length; i++) {
      text = sorttable.getInnerText(table.tBodies[0].rows[i].cells[column]);
	  //alert(text);
      if (text != '') {
        if (text.match(/^(-?[£$¤]?[\d,.]+%?)|([-+]?[1-9]\.[0-9]+e[+-]?[0-9]+)$/)) {
          return sorttable.sort_numeric;
        }
        // check for a date: dd/mm/yyyy or dd/mm/yy 
        // can have / or . or - as separator
        // can be mm/dd as well
        possdate = text.match(sorttable.DATE_RE)
        if (possdate) {
          // looks like a date
          first = parseInt(possdate[1]);
          second = parseInt(possdate[2]);
          if (first > 12) {
            // definitely dd/mm
            return sorttable.sort_ddmm;
          } else if (second > 12) {
            return sorttable.sort_mmdd;
          } else {
            // looks like a date, but we can't tell which, so assume
            // that it's dd/mm (English imperialism!) and keep looking
            sortfn = sorttable.sort_ddmm;
          }
        }
      }
    }
    return sortfn;
  },
  
  getInnerText: function(node) {
    // gets the text we want to use for sorting for a cell.
    // strips leading and trailing whitespace.
    // this is *not* a generic getInnerText function; it's special to sorttable.
    // for example, you can override the cell text with a customkey attribute.
    // it also gets .value for <input> fields.
    
    hasInputs = (typeof node.getElementsByTagName == 'function') &&
                 node.getElementsByTagName('input').length;
    
    if (node.getAttribute("sorttable_customkey") != null) {
      return node.getAttribute("sorttable_customkey");
    }
    else if (typeof node.textContent != 'undefined' && !hasInputs) {
      return node.textContent.replace(/^\s+|\s+$/g, '');
    }
    else if (typeof node.innerText != 'undefined' && !hasInputs) {
      return node.innerText.replace(/^\s+|\s+$/g, '');
    }
    else if (typeof node.text != 'undefined' && !hasInputs) {
      return node.text.replace(/^\s+|\s+$/g, '');
    }
    else {
      switch (node.nodeType) {
        case 3:
          if (node.nodeName.toLowerCase() == 'input') {
            return node.value.replace(/^\s+|\s+$/g, '');
          }
        case 4:
          return node.nodeValue.replace(/^\s+|\s+$/g, '');
          break;
        case 1:
        case 11:
          var innerText = '';
          for (var i = 0; i < node.childNodes.length; i++) {
            innerText += sorttable.getInnerText(node.childNodes[i]);
          }
          return innerText.replace(/^\s+|\s+$/g, '');
          break;
        default:
          return '';
      }
    }
  },
  
  reverse: function(tbody) {
    // reverse the rows in a tbody
    newrows = [];
    for (var i=0; i<tbody.rows.length; i++) {
      newrows[newrows.length] = tbody.rows[i];
    }
    for (var i=newrows.length-1; i>=0; i--) {
       tbody.appendChild(newrows[i]);
    }
    delete newrows;
  },
  
  /* sort functions
     each sort function takes two parameters, a and b
     you are comparing a[0] and b[0] */
  sort_numeric: function(a,b) {
   aa = parseFloat(a[0]);
    if (isNaN(aa)) aa = 0;
    bb = parseFloat(b[0]); 
    if (isNaN(bb)) bb = 0;
/*	alert(a[0]);
	alert(a[0].replace(/[^0-9.-]/g,''));
 	alert(parseFloat(a[0]));
   aa = parseFloat(a[0].replace(/[^0-9.-]/g,''));
	//alert(aa);
    if (isNaN(aa)) aa = 0;
    bb = parseFloat(b[0].replace(/[^0-9.-]/g,'')); 
    if (isNaN(bb)) bb = 0;*/
    return (aa-bb);
  },
  sort_alpha: function(a,b) {
    if (a[0]==b[0]) return 0;
    if (a[0]<b[0]) return -1;
    return 1;
  },
  sort_ddmm: function(a,b) {
    mtch = a[0].match(sorttable.DATE_RE);
    y = mtch[3]; m = mtch[2]; d = mtch[1];
    if (m.length == 1) m = '0'+m;
    if (d.length == 1) d = '0'+d;
    dt1 = y+m+d;
    mtch = b[0].match(sorttable.DATE_RE);
    y = mtch[3]; m = mtch[2]; d = mtch[1];
    if (m.length == 1) m = '0'+m;
    if (d.length == 1) d = '0'+d;
    dt2 = y+m+d;
    if (dt1==dt2) return 0;
    if (dt1<dt2) return -1;
    return 1;
  },
  sort_mmdd: function(a,b) {
    mtch = a[0].match(sorttable.DATE_RE);
    y = mtch[3]; d = mtch[2]; m = mtch[1];
    if (m.length == 1) m = '0'+m;
    if (d.length == 1) d = '0'+d;
    dt1 = y+m+d;
    mtch = b[0].match(sorttable.DATE_RE);
    y = mtch[3]; d = mtch[2]; m = mtch[1];
    if (m.length == 1) m = '0'+m;
    if (d.length == 1) d = '0'+d;
    dt2 = y+m+d;
    if (dt1==dt2) return 0;
    if (dt1<dt2) return -1;
    return 1;
  },
  
  shaker_sort: function(list, comp_func) {
    // A stable sort function to allow multi-level sorting of data
    // see: http://en.wikipedia.org/wiki/Cocktail_sort
    // thanks to Joseph Nahmias
    var b = 0;
    var t = list.length - 1;
    var swap = true;

    while(swap) {
        swap = false;
        for(var i = b; i < t; ++i) {
            if ( comp_func(list[i], list[i+1]) > 0 ) {
                var q = list[i]; list[i] = list[i+1]; list[i+1] = q;
                swap = true;
            }
        } // for
        t--;

        if (!swap) break;

        for(var i = t; i > b; --i) {
            if ( comp_func(list[i], list[i-1]) < 0 ) {
                var q = list[i]; list[i] = list[i-1]; list[i-1] = q;
                swap = true;
            }
        } // for
        b++;

    } // while(swap)
  }  
}

/* ******************************************************************
   Supporting functions: bundled here to avoid depending on a library
   ****************************************************************** */

// Dean Edwards/Matthias Miller/John Resig

/* for Mozilla/Opera9 */
if (document.addEventListener) {
    //document.addEventListener("DOMContentLoaded", sorttable.init, false);
}

/* for Internet Explorer */
/*@cc_on @*/
/*@if (@_win32)
    document.write("<script id=__ie_onload defer src=javascript:void(0)><\/script>");
    var script = document.getElementById("__ie_onload");
    script.onreadystatechange = function() {
        if (this.readyState == "complete") {
            sorttable.init(); // call the onload handler
        }
    };
/*@end @*/

/* for Safari */
if (/WebKit/i.test(navigator.userAgent)) { // sniff
    var _timer = setInterval(function() {
        if (/loaded|complete/.test(document.readyState)) {
            //sorttable.init(); // call the onload handler
        }
    }, 10);
}

/* for other browsers */
//window.onload = sorttable.init;

// written by Dean Edwards, 2005
// with input from Tino Zijdel, Matthias Miller, Diego Perini

// http://dean.edwards.name/weblog/2005/10/add-event/

function dean_addEvent(element, type, handler) {
	if (element.addEventListener) {
		element.addEventListener(type, handler, false);
	} else {
		// assign each event handler a unique ID
		if (!handler.$$guid) handler.$$guid = dean_addEvent.guid++;
		// create a hash table of event types for the element
		if (!element.events) element.events = {};
		// create a hash table of event handlers for each element/event pair
		var handlers = element.events[type];
		if (!handlers) {
			handlers = element.events[type] = {};
			// store the existing event handler (if there is one)
			if (element["on" + type]) {
				handlers[0] = element["on" + type];
			}
		}
		// store the event handler in the hash table
		handlers[handler.$$guid] = handler;
		// assign a global event handler to do all the work
		element["on" + type] = handleEvent;
	}
};
// a counter used to create unique IDs
dean_addEvent.guid = 1;

function removeEvent(element, type, handler) {
	if (element.removeEventListener) {
		element.removeEventListener(type, handler, false);
	} else {
		// delete the event handler from the hash table
		if (element.events && element.events[type]) {
			delete element.events[type][handler.$$guid];
		}
	}
};

function handleEvent(event) {
	var returnValue = true;
	// grab the event object (IE uses a global event object)
	event = event || fixEvent(((this.ownerDocument || this.document || this).parentWindow || window).event);
	// get a reference to the hash table of event handlers
	var handlers = this.events[event.type];
	// execute each event handler
	for (var i in handlers) {
		this.$$handleEvent = handlers[i];
		if (this.$$handleEvent(event) === false) {
			returnValue = false;
		}
	}
	return returnValue;
};

function fixEvent(event) {
	// add W3C standard event methods
	event.preventDefault = fixEvent.preventDefault;
	event.stopPropagation = fixEvent.stopPropagation;
	return event;
};
fixEvent.preventDefault = function() {
	this.returnValue = false;
};
fixEvent.stopPropagation = function() {
  this.cancelBubble = true;
}

// Dean's forEach: http://dean.edwards.name/base/forEach.js
/*
	forEach, version 1.0
	Copyright 2006, Dean Edwards
	License: http://www.opensource.org/licenses/mit-license.php
*/

// array-like enumeration
if (!Array.forEach) { // mozilla already supports this
	Array.forEach = function(array, block, context) {
		for (var i = 0; i < array.length; i++) {
			block.call(context, array[i], i, array);
		}
	};
}

// generic enumeration
Function.prototype.forEach = function(object, block, context) {
	for (var key in object) {
		if (typeof this.prototype[key] == "undefined") {
			block.call(context, object[key], key, object);
		}
	}
};

// character enumeration
String.forEach = function(string, block, context) {
	Array.forEach(string.split(""), function(chr, index) {
		block.call(context, chr, index, string);
	});
};

// globally resolve forEach enumeration
var forEach = function(object, block, context) {
	if (object) {
		var resolve = Object; // default
		if (object instanceof Function) {
			// functions have a "length" property
			resolve = Function;
		} else if (object.forEach instanceof Function) {
			// the object implements a custom forEach method so use that
			object.forEach(block, context);
			return;
		} else if (typeof object == "string") {
			// the object is a string
			resolve = String;
		} else if (typeof object.length == "number") {
			// the object is array-like
			resolve = Array;
		}
		resolve.forEach(object, block, context);
	}
};
</script>

<script>


window.onload = function ()
{
	//sorttable.init();
	if(!window.SiQuery)	
	{
		sorttable.init();
		return;
	}	
	CefStyle_GetData();
	
	ReceiveDataFromCpp('RequestStartFromCPP', function (data){   
		var jsonObj = JSON.parse(data);
		if(jsonObj.target && jsonObj.target == 'SaveFileFromCPP')
		{			
			Cef_SaveFile(jsonObj.path);
		}
	});
};

</script>
<div class=Section1>
<span id='logo'>
<img width=100% src=logo.PNG></img>
<!--<p><img src=logo.bmp></img><br></p>-->
</span>
<img  id=openimg src=open.png style="display:none"></img>
<img  id=closeimg src=close.png style="display:none"></img>
<script>
function myFunction() {
	    var jsontemp = {
            mode: 3,
            title: 'Save html File',
            path: 'untitled',
            path_hint: 'PathHint_htmlfilepath',
            filters:[
            "html|.html",
            ],
            selected_filter:0
        };        
        new FileDialog(jsontemp, function(json) {
			Cef_SaveFile(json.path[0]);
       });
}
</script>
<!-- <input type="button" id="myBtn" onclick="myFunction()" value="Save File"/> -->
<span id=eExtractionMode>
<h1 align=center>PowerSI Simulation Report</h1>
<p><b>Date:</b><span id="Date"> ???</span></p>
<span id="Note"><p>user defined note here</p></span>

<h1>1&nbsp&nbspGeneral information</h1>
<h2>1.1&nbsp&nbsp Spd file name and location</h2>
<p><b>PowerSI version:</b><span id="Version"></span></p>
<p><b>File names and locations:</b></p>
<span id="FilenameLocation">
<p >Layout spd file: ???\layout.spd</p>
</span>

<h2>1.2&nbsp&nbspBoard stackup</h2>
<span id="BoardStackup">
<p>Board stackup information set by PSI</p>
</span>


<h2>1.3&nbsp&nbspLayout top and bottom layer views</h2>
<h3>1.3.1&nbsp&nbspLayout top layer view with enabled nets only</h3>
<span id="ImageLayoutTop">
</span>

<h3>1.3.2&nbsp&nbspLayout bottom layer view with enabled nets only</h3>
<span id="ImageLayoutBottom">
</span>

<h1>2&nbsp&nbspSimulation setup</h1>
<h2>2.1&nbsp&nbspNet enabled for simulation</h2>
<span id="NetEnabled" >
<p>Net information set by PSI</p>
</span>

<h2>2.2&nbsp&nbspCircuit enabled for simulation</h2>
<span id="CktEnabled" >
<p>Ckt information set by PSI</p>
</span>

<h2>2.3&nbsp&nbspPort setup</h2>
<span id="PortSetup">
<p>Port information set by PSI</p>
</span>

<h2>2.4&nbsp&nbspFrequency setup</h2>
<span id="FrequencySetup">
<p>Frequency information set by PSI</p>
</span>

<h1>3&nbsp&nbspResults</h1>
<h2>3.1&nbsp&nbspSimulation resources</h2>
<span id='SimulationResources'>
<p>AFS total sampling points: ??</p>
<p>Peak memory use: ??</p>
<p>Total time used for simulation:&nbsp ??</p>
</span>
<h2>3.2&nbsp&nbspSimulation results curve displays</h2>
<span id="CurveView">
</span>
</span>

<span id=e3DFEMMode_Extraction>
<h1 align=center>PowerSI Simulation Report</h1>
<p><b>Date:</b><span id="Date"> ???</span></p>
<span id="Note"><p>user defined note here</p></span>

<h1>1&nbsp&nbspGeneral information</h1>
<h2>1.1&nbsp&nbsp Spd file name and location</h2>
<p><b>PowerSI version:</b><span id="Version"></span></p>
<p><b>File names and locations:</b></p>
<span id="FilenameLocation">
<p >Layout spd file: ???\layout.spd</p>
</span>

<h2>1.2&nbsp&nbspBoard stackup</h2>
<span id="BoardStackup">
<p>Board stackup information set by PSI</p>
</span>


<h2>1.3&nbsp&nbspLayout top and bottom layer views</h2>
<h3>1.3.1&nbsp&nbspLayout top layer view with enabled nets only</h3>
<span id="ImageLayoutTop">
</span>

<h3>1.3.2&nbsp&nbspLayout bottom layer view with enabled nets only</h3>
<span id="ImageLayoutBottom">
</span>

<h1>2&nbsp&nbspSimulation setup</h1>
<h2>2.1&nbsp&nbspNet enabled for simulation</h2>
<span id="NetEnabled" >
<p>Net information set by PSI</p>
</span>

<h2>2.2&nbsp&nbspCircuit enabled for simulation</h2>
<span id="CktEnabled" >
<p>Ckt information set by PSI</p>
</span>

<h2>2.3&nbsp&nbspPort setup</h2>
<span id="PortSetup">
<p>Port information set by PSI</p>
</span>

<h2>2.4&nbsp&nbspFrequency setup</h2>
<span id="FrequencySetup">
<p>Frequency information set by PSI<p>
</span>

<h1>3&nbsp&nbspResults</h1>
<h2>3.1&nbsp&nbspSimulation results curve displays</h2>
<span id="CurveView">
</span>
</span>

</div>
</body>

<span id=eSignalEPMode>
<h1 align=center>Cadence ERC Report</h1>
<p><b>Date:</b><span id="Date"> ???</span></p>
<span id="Note"><p>user defined note here</p></span>

<h1>1&nbsp&nbspGeneral Information</h1>
<h2>1.1&nbsp&nbsp Spd File Name and Location</h2>
<p><b>PowerSI version:</b><span id="Version"></span></p>
<p><b>File names and locations:</b></p>
<span id="FilenameLocation">
<p >Layout spd file: ???\layout.spd</p>
</span>

<h2>1.2&nbsp&nbspBoard Stackup</h2>
<span id="BoardStackup">
<p>Board stackup information set by PSI</p>
</span>

<h2>1.3&nbsp&nbspBoard Routing Information</h2>
<span id="BoardRoutingInfo">
<p>Board routing information set by PSI</p>
</span>
<!--<h2>1.3&nbsp&nbspAbout Trace Imp/Cpl/Ref Check</h2>
<p>
Joy will write up this section...
</p> -->



<h1>2&nbsp&nbspERC Simulation/Check Setup</h1>
<h2>2.1&nbsp&nbsp ERC Simulation Setup</h2>
<!--<h2>&nbsp&nbspCheck net options</h2>-->
<span id="TCKG_Option" >
<p>Information set by SPDGEN</p>
</span>
<span id="ERC_RulesAssignments"></span>
<!--<h2>2.2&nbsp&nbspTrace Check Resources</h2>
<span id="TCKG_Resource" >
<p>Information set by SPDGEN</p>
</span>
-->

<h1>3&nbsp&nbspERC Simulation Results - Net Based</h1>
<span id="TCKG_Result"></span>

<!--<h1>5&nbsp&nbspTrace imp/cpl/ref check violation results</h1>-->
<span id ="TCKG_VioResult"></span>
<span id ="ERC_ViolationResult"></span>
<span id ="ERC_DDRSkewCheckResult"></span>
</span>

<span id=eSIMetrics>
<h1 align=center>PowerSI S-Parameter Assessment Report</h1>
<p><b>Date:</b><span id="Date"> ???</span></p>
<span id="Note"><p>user defined note here</p></span>

<h1>1&nbsp&nbspGeneral Information</h1>
<h2>1.1&nbsp&nbsp Spd File Name And Location</h2>
<p><b>PowerSI version:</b><span id="Version"></span></p>
<p><b>File names and locations:</b></p>
<span id="FilenameLocation">
<p >Layout spd file:\layout.spd</p>
<p >S-Parameter Assessment result file:\Result </p>
</span>

<h2>1.2&nbsp&nbspBoard Stackup</h2>
<span id="BoardStackup">
<p>Board stackup information set by PSI</p>
</span>

<h2>1.3&nbsp&nbspAbout S-Parameter Assessment</h2>
<p>
S-Parameter Assessment enables user to easily evaluate layout SI performance at board level.  
In PowerSI S-Parameter Assessment, signal and crosstalk waveforms are obtained by frequency-to-time domain conversion of the input pulse responses, and S-Parameter Assessment are calculated using Rx and FEXT waveforms.  
Check report is generated after check simulation. 
</p> 

<p>
By identifying transmitting(Tx) and receiving(Rx) components, user can generate net groups for S-Parameter Assessment. A net group contains nets that share same Tx and Rx components, and may contain both single-ended and differential nets. Multiple net groups can be included in a single S-Parameter Assessment simulation.
 The stimulus and termination circuit used in simulation are defined by user for each net groups,  with the following assumptions: 
</p>
<ul>
<li>All single-ended nets in a net group share the same stimulus circuits at the corresponding Tx component pins, they also share the same termination circuits at the corresponding receiving component pins.</li>
<li>All differential nets in a net group share the same differential stimulus circuits at the corresponding Tx component pins, they also share the same differential termination circuits at the corresponding Rx component pins.</li>
</ul>
<p>
An extended net is defined as two signal nets connected by a passive component, such as two memory data nets connected by a serial resistor.
 In S-Parameter Assessment, all extended nets between the selected Tx and Rx components are automatically detected,  and each pair of extended nets are treated as one signal net.
 </p>
 <p>S-Parameter Assessment simulation include all nets from all net groups. The crosstalk at the Tx component pins are referred as NEXT, and the crosstalk at the Rx component is referred as FEXT. </p>
<p>After simulation, the following waveforms are available for each nets </p>
<ul>
<li>Tx/Rx waveforms at the Tx/Rx component pins assuming all other nets are quiet</li>
<li>NEXT/FEXT waveforms at the Tx/Rx  component pins assuming all other nets are in phase and active </li>
</ul>
<img src=txrxfene.png></img>

<p>For multi-drop topology, commonly used in DDR signals, user can identify active receiving components for targeted DRAM/DIMM. In S-Parameter Assessment simulation, only the Rx and FEXT waveforms at the active receiving components are saved, then used for S-Parameter Assessment calculations.
</p>
<p>Performance metrics are generated based on Rx and FEXT waveforms at the receiving component using the following equations</p>
<img src=function0.png></img>

<p>Where</p>
<ul>
<li>	 t<sub>1</sub>and t<sub>2</img></sub>are starting and ending time for the received pulse (1 UI width)</li>
<li>	 t<sub>max</sub>is maximum time-domain simulation time</li>
</ul>

<h1>2&nbsp&nbspLayout S-Parameter Assessment Nets And TX/RX Components</h1>
<span id="CktTreeView" >
<p>Information set by PowerSI</p>
</span>


<h1>3&nbsp&nbspTime-domain simulation options and resources</h1>
<h2>3.1&nbsp&nbspS-Parameter Assessment Port Setup</h2>
<span id="PortSetupSIM"></span>
<h2>3.2&nbsp&nbspPulse Response Parameters</h2>
<span id="PulseRespParamSetup"></span>
<h2>3.3&nbsp&nbspFrequency Setup</h2>
<span id="FrequencySetupSIM"></span>
<h2>3.4&nbsp&nbspSimulation resources</h2>
<span id="SimulationResourcesSIM"></span>

<h1>4&nbsp&nbspS-Parameter Assessment Results</h1>
<span id="SIMSimulationResultDispaly"></span>
</span>

</body>

</html>
